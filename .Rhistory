# This document is intended for educational purposes only for
# Fiona Burlig's PPHA 34600 Program Evaluation Course at the
# Harris School of Public Policy
# TA Session 1 details the following:
#
# 1. Review of Fundamental Problem of Evaluation
# 2. ATE versus the 'Naive Estimator'
# 3. Selection on Observables vs. Unobservables
# 4. ATT versus ATN (and comparison to ATE)
# 5. Primary OLS assumptions for linear estimation
# 6. OVB intuition
# 7. Introduction into data work in R
# 8. R and linear regression/ggplot presentation
# 9. Using R Markdown and 'knit'
#
knitr::opts_chunk$set(echo = TRUE)
summary(diamonds)
summary(diamonds)
library(tidyverse)
summary(diamonds)
plot(diamonds$cut)
library(tidyverse)
summary(diamonds)
plot(diamonds$cut)
#install.packages('tidyverse')
library(tidyverse)
library(readr)
# includes read_xls() for excel complex files
library(readxl)
# includes read_dta() for Stata data files
library(haven)
# linear models for panel data (more like p-useful)
library(plm)
# diagnostic checking in linear regression models
library(lmtest)
# linear models for panel data (more like p-useful)
install.packages("plm")
# diagnostic checking in linear regression models
install.packages("lmtest")
# includes read_csv() for .csv data types
library(readr)
# includes read_xls() for excel complex files
library(readxl)
# includes read_dta() for Stata data files
library(haven)
# linear models for panel data (more like p-useful)
library(plm)
# diagnostic checking in linear regression models
library(lmtest)
# load in dataframe (here, the command is simply assignment)
df <- swiss
# get an idea of what the data looks like
glimpse(df)
summary(df$Examination)
summary(df)
# plot values to get a feel for their distribution or potential relation
hist(df$Fertility)
## use ggplot for better looking and more adaptive graphs:
library(ggplot2)
ggplot(df, aes(x=Education, y=Fertility)) +
# Tell ggplot to create points, with a new aes of color
geom_point(aes(color=Examination)) +
# Tell ggplot to create a regression line from your x and y
stat_smooth(method = "lm", col = "red") +
# Pick a smooth theme to make your work pop! to the TAs
theme_classic()
# Create dummy variable using ifelse() statement
df$dummy <- ifelse(df$Education >=12, 1, 0)
view(df)
# Rename this variable 'Treated' (note multiple names can be changed)
names(df)[7] <- c('Treated')
view(df)
# Create dummy variable using ifelse() statement
df$dummy <- ifelse(df$Education >=12, 1, 0)
# load in dataframe (here, the command is simply assignment)
df <- swiss
# Create dummy variable using ifelse() statement
df$dummy <- ifelse(df$Education >=12, 1, 0)
view(df)
# Rename this variable 'Treated' (note multiple names can be changed)
names(df)[7] <- c('Treated')
view(df)
# Regression with controls of Catholic and Agriculture
myReg <- lm(Fertility ~ Treated + Catholic + Agriculture, data=df)
# use stargazer to present my findings
library(stargazer)
stargazer(myReg, type='text')
knitr::opts_chunk$set(echo = TRUE) # Make sure to leave echo = TRUE so the TAs can see your code in the PDF
library("tidyverse")
library("knitr")     # Suggestion: consider using knitr's kable() function if you want to produce a nice-looking table
library("stargazer") # Suggestion: consider using the stargazer() function if you want to display regression results
# When using stargazer() in a code chunk, be sure to add results="asis" to your chunk header, such as:
# ```{r, results="asis"}
#proportion of compliers in treatment group
pi <- lm (leafs_trt_yes ~ leafs_trt, data = data)
knitr::opts_chunk$set(echo = TRUE) # Make sure to leave echo = TRUE so the TAs can see your code in the PDF
library("tidyverse")
library("knitr")     # Suggestion: consider using knitr's kable() function if you want to produce a nice-looking table
library("stargazer") # Suggestion: consider using the stargazer() function if you want to display regression results
# When using stargazer() in a code chunk, be sure to add results="asis" to your chunk header, such as:
# ```{r, results="asis"}
data <- read_csv("ps1_data_CORRECTED.csv")
regressions <- data %>%
select(baseline_yields,
baseline_profits,
baseline_workers,
baseline_plots,
baseline_owner_age) %>%
lapply(function(x) lm(x ~ leafs_trt, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2, 8)]) %>%
t()
balance_table %>%
kable(col.names = c("Difference in Means", "$p$-value"))
data %>%
ggplot(aes(x = baseline_yields)) +
geom_histogram() +
scale_x_continuous(name = "Pre-Treatment Yields (tonnes per hectare)",
labels = scales::comma) +
scale_y_continuous(name = "Number of Farmers") +
facet_wrap(~leafs_trt,
scales = "free_x",
labeller = labeller(leafs_trt = c("0" = "Control Group",
"1" = "Treatment Group"))) +
labs(title = "Empirical Distribution of Baseline Yields by Randomized Group")
data <- data %>%
filter(baseline_yields < 1000)
regressions <- data %>%
select(baseline_yields,
baseline_profits,
baseline_workers,
baseline_plots,
baseline_owner_age) %>%
lapply(function(x) lm(x ~ leafs_trt, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2, 8)]) %>%
t()
balance_table %>%
kable(col.names = c("Difference in Means", "$p$-value"))
ate <- lm(endline_yields ~ leafs_trt, data = data)
summary(ate)
bad_control <- lm(endline_yields ~ leafs_trt + endline_plots, data = data)
summary(bad_control)
ate_control <- lm(endline_yields ~ leafs_trt + baseline_plots, data = data)
summary(ate_control)
#proportion of compliers in treatment group
pi <- lm (leafs_trt_yes ~ leafs_trt, data = data)
summary(pi)
#Dividing ITT by the proportion of compliers = LATE
tLATE <- ate$coefficients[2]/pi$coefficients[2]
tLATE
knitr::opts_chunk$set(echo = TRUE) # Make sure to leave echo = TRUE so the TAs can see your code in the PDF
library("tidyverse")
library("knitr")     # Suggestion: consider using knitr's kable() function if you want to produce a nice-looking table
library("stargazer") # Suggestion: consider using the stargazer() function if you want to display regression results
# When using stargazer() in a code chunk, be sure to add results="asis" to your chunk header, such as:
# ```{r, results="asis"}
data <- read_csv("ps1_data_CORRECTED.csv")
data <- data %>%
filter(baseline_yields < 1000)
yields <- lm(baseline_yields ~ leafs_trt, data = data)
profits <- lm(baseline_profits ~ leafs_trt, data = data)
btable <- c(yields, profits)
btable %>%
kable()
btable
regressions <- data %>%
select(baseline_yields,
baseline_profits,
baseline_workers,
baseline_plots,
baseline_owner_age) %>%
lapply(function(x) lm(x ~ leafs_trt, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2, 8)]) %>%
t()
balance_table
regressions
yields
btable
btable <- cbind(yields, profits)
btable
btable <- cbind(yields$coefficients, profits$coefficients)
btable
kable(btable)
yields
yields$2
yields$8
coef(yields)
setwd("~/Documents/VS Code Projects/dataviz-hw4/bar chart")
library(tidyverse)
weekly_avg <- read_csv("weekly-avg.csv")
nat <- read_csv("nat.csv")
all_states <- read_csv("all-states2.csv")
View(all_states)
View(nat)
View(weekly_avg)
setwd("~/Documents/VS Code Projects/dataviz-hw4/stacked area chart")
library(tidyverse)
chart <- read_csv("firstjob_major_d3_3.csv")
view(chart)
chart[year]
chart.year
chart[,year]
chart[1]
years <- chart[1]
year
years
chart[[1]]
years <- chart[[1]]
years
library("tidyverse")
library("knitr")
library("stargazer")
library("AER")
install.packages(AER)
install.packages("AER")
library("AER")
ivreg?
ivreg?
library("AER")
library("AER")
?ivreg
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("knitr")
library("stargazer")
library("lfe")
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("knitr")
library("stargazer")
install.packages("lfe")
library("lfe")
install.packages("plm")
library("plm")
df <-
read_csv("ps_4_data.csv", col_types = "dddd") %>%
arrange(hh_id, year)
df <-
read_csv("ps_4_data.csv", col_types = "dddd") %>%
arrange(hh_id, year)
df %>%
mutate(
has_ev = ifelse(is.na(ev_purchase_year), 0, 1)
) %>%
group_by(has_ev) %>%
summarise(avg_usage = mean(electricity_use))
df_2012 <- df %>%
filter(ev_purchase_year == "2012") %>%
mutate(year_as_factor = as.factor(year),
ev = ifelse(year < 2012, 0, 1)
)
r2 <- plm(electricity_use~ev,data = df_2012, model = "within", index = c('hh_id', 'year'))
summary(r2)
avg_energy <- df_2012 %>%
group_by(year) %>%
summarise(avg_energy_consumption = mean(electricity_use))
pre_post = df_2012 %>%
group_by(ev) %>%
summarise(pre_post = mean(electricity_use))
df_2012 %>%
ggplot(aes(year, electricity_use)) +
geom_point() +
xlim(2007, 2017) +
scale_x_continuous(breaks=seq(2007, 2017, 1))+
geom_line(aes(year, avg_energy_consumption, color = "Avg HH Consumption"), data = avg_energy) +
geom_segment(aes(x = 2007, y = 8549, xend = 2012, yend = 8549), data = NULL, linetype=2) +
geom_segment(aes(x = 2012, y = 14400, xend = 2017, yend = 14400), data = NULL, linetype=2) +
labs(title="Average Energy Consumption Over Time \nfor Households Purchasing in 2012", color = "") +
annotate("text", x = 2008, y = 9100, label = "Avg Consumption \nPre-2012", size=2) +
annotate("text", x = 2013, y = 14900, label = "Avg Consumption \nPost-2012", size=2) +
theme(legend.position="bottom")
df %>%
filter(is.na(ev_purchase_year) | ev_purchase_year == "2012") %>%
group_by(year, ev_purchase_year) %>%
summarise(avg_energy_consumption = mean(electricity_use)) %>%
ggplot(aes(year, avg_energy_consumption,
color=factor(ev_purchase_year), group = factor(ev_purchase_year))) +
geom_point() +
geom_line() +
xlim(2007, 2017) +
scale_x_continuous(breaks=seq(2007, 2017, 1)) +
geom_vline(aes(xintercept = 2011), linetype=2) +
annotate("text", x = 2007.5, y = 15000, label = "Pre-Period") +
annotate("text", x = 2012, y = 15000, label = "Post-Period") +
labs(title = "Avg Annual Energy Consumption: 2012 Purchasers vs Never Purchasers", color = "") +
theme(legend.position="bottom")
df %>%
filter(is.na(ev_purchase_year) | ev_purchase_year == "2013") %>%
group_by(year, ev_purchase_year) %>%
summarise(avg_energy_consumption = mean(electricity_use)) %>%
ggplot(aes(year, avg_energy_consumption,
color=factor(ev_purchase_year), group = factor(ev_purchase_year))) +
geom_point() +
geom_line() +
xlim(2007, 2017) +
scale_x_continuous(breaks=seq(2007, 2017, 1)) +
geom_vline(aes(xintercept = 2012), linetype=2) +
annotate("text", x = 2007.5, y = 5000, label = "Pre-Period") +
annotate("text", x = 2013, y = 5000, label = "Post-Period") +
labs(title = "Avg Annual Energy Consumption: 2013 Purchasers vs Never Purchasers", color = "") +
theme(legend.position="bottom")
df_2013 <- df %>%
filter(ev_purchase_year == 2013|is.na(ev_purchase_year)) %>%
mutate(D = case_when(ev_purchase_year == 2013 & year >= 2013 ~ 1,
ev_purchase_year == 2013 & year < 2013 ~ 0,
is.na(ev_purchase_year) ~ 0,
TRUE ~ as.numeric(NA)),
treat = ifelse(is.na(ev_purchase_year), 0, 1),
post = ifelse(year >= 2013, 1, 0))
# Naive Estimator
naive.tab <- df_2013 %>%
group_by(treat, post) %>%
summarise(mean.use = mean(electricity_use))
naive.tab
naive <- (naive.tab$mean.use[4] - naive.tab$mean.use[3]) -
(naive.tab$mean.use[2] - naive.tab$mean.use[1])
naive
#### Regression without fixed effects
reg1 <- lm(electricity_use ~ treat + post + treat * post, data = df_2013)
reg2 <- lm(electricity_use ~ D + treat + post, data = df_2013)
stargazer(reg1, reg2, type = 'text')
#Regression with individual and time fixed effects
# With FE only
### Using lm and dummies is long-lasting
# fe_only <- lm(electricity_use ~ D + as.factor(hh_id) + as.factor(year), data = df_2013)
### Using felm is faster and efficient
fe_only    <-  felm(electricity_use ~ D|hh_id + year|0|0, data = df_2013)
# With FE and error clustering
fe_cluster <-  felm(electricity_use ~ D|hh_id + year|0|hh_id, data = df_2013)
stargazer(fe_only, fe_cluster, type = "text", keep = "D")
df %>%
group_by(ev_purchase_year, year) %>%
summarise(mean_electricity_use = mean(electricity_use)) %>%
ggplot(aes(x = year, y = mean_electricity_use, color = as.factor(ev_purchase_year))) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(2007, 2017, 1)) +
labs(title = "Average Consumption of Electricity against year:\n divided by the year of purchase",
color = "")
# Drop 2012
df_es <-
df %>%
filter(ev_purchase_year != 2012|is.na(ev_purchase_year)) %>%
mutate(D = case_when(!is.na(ev_purchase_year) & year >= ev_purchase_year ~ 1,
!is.na(ev_purchase_year) & year < ev_purchase_year ~ 0,
is.na(ev_purchase_year) ~ 0,
TRUE ~ as.numeric(NA)))
summary(felm(electricity_use ~ D|hh_id + year|0|hh_id, data = df_es))
# 1703.399***
df_es <-
df_es %>%
mutate(ever_treated = case_when(!is.na(ev_purchase_year) ~ 1,
is.na(ev_purchase_year) ~ 0,
TRUE ~ as.numeric(NA)),
event_time = ifelse(!is.na(ev_purchase_year), year - ev_purchase_year, 0),
D = factor(ever_treated * event_time),
D = relevel(D, ref = "-1"))
es <- felm(electricity_use ~ D|hh_id + year|0|hh_id, data = df_es)
summary(es)
res <- as.data.frame(summary(es)$coefficients)
res$low <- res$Estimate - qnorm(1 - 0.05/2)*res$`Cluster s.e.`
res$high <- res$Estimate + qnorm(1 - 0.05/2)*res$`Cluster s.e.`
res %>% ggplot(aes(x = c(-10:-2, 0:4), y = Estimate)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = low, ymax = high), fill = "grey", alpha = .5) +
scale_x_continuous(breaks = c(-10:-2, 0:4)) +
labs(x = '# of years after regulation', y = 'energy use') +
ggtitle("Treatment effects over time")
mean(df_es$electricity_use[df_es$year<2013])
max(res$Estimate)
View(df_es)
View(df)
View(df_2012)
View(df_2013)
read_csv("ps_4_data.csv", col_types = "dddd")
getwd()
setwd()
setwd(getwd)
setwd(getwd())
getwd()
setwd("~/Documents/VS Code Projects/dataviz-edu-county-2019")
library(tidyverse)
library(dplyr)
edreport <- read.csv("EducationReport.csv")
view(edreport)
install.packages("readxl")
install.packages("readxl")
library(readxl)
eddata <- read_xls("Education.xls")
view(eddata)
View(eddata)
## remove first 3 rows
eddata <- eddata %>%
select(-1:3)
library(tidyverse)
library(dplyr)
## remove first 3 rows
eddata <- eddata %>%
select(-1:3)
eddata <- read_xls("Education.xls")
## remove first 3 rows
eddata <- select(eddata[-1:3])
## remove first 3 rows
?read_xls
eddata <- read_xls("Education.xls", skip = 3)
view(eddata)
eddata[1]
eddata[[1]]
row.names(1)
eddata %>%
row.names(1)
eddata[1,]
column_names <- eddata[1,]
eddata <- eddata %>%
rename(column_names)
view(eddata)
colnames(mydata)
colnames(eddata)
?rename
eddata %>%
rename_with(column_names)
column_names <- as.tibble(column_names)
View(column_names)
column_names <- list(column_names)
View(column_names)
(1,2,3,4,5,6)
vector(1,2,3,4,5)
x <- c(1,2,3,4,5)
column_names <- c(column_names)
column_names <- c(eddata[1,])
View(column_names)
rm(list = column_names)
rm(list = ls(column_names))
rrm(list = ls())
rm(list = ls())
library(tidyverse)
library(dplyr)
library(readxl)
##read in data, skip first 3 rows
eddata <- read_xls("Education.xls", skip = 3)
new_names <- c(eddata[1,])
unlist(new_names
unlist(new_names)
unlist(new_names)
new_names <- unlist(new_names)
eddata <- eddata %>%
rename(new_names)
eddata <- eddata %>%
rename(colnames(new_names))
names(eddata) <- new_names
view(eddata)
eddata <- eddata[-1,]
view(eddata)
state.name
states <- c(state.name)
state_data <- eddata %>%
filter(`Area name`==states)
state_data <- eddata %>%
filter(`Area name`== states)
filter()
eddata %>%
if(`Area name`== states) {
filter()
}
